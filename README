
aspreify - reify answer set programs

The purpose of this program is to parse textual answer set programs
(ASP, Prolog like syntax) as accepted by lparse
(http://www.tcs.hut.fi/Software/smodels/) and produce a description of
the input program as ASP facts, effectively reifying the input program
allowing, among other things, ASP programs to be interpreted or
modified by other ASP programs.

Vesa Luukkala (vesa.luukkala@gmail.com), 20.10.2012 

1. Building 

Requires Haskell platform (http://www.haskell.org/platform/), tested on 2012.2.0.0. 
To produce an executable:
> ghc -o aspreify main.hs rdfrender.hs txtrender.hs factrender.hs aspparse.hs 

A simple test:
> ./aspreify tests/hamiltonian_cycle.lp
produces tests/hamiltonian_cycle.lp.reified 

> ./aspreify -t tests/hamiltonian_cycle.lp
The result has the same unreified rules as the input, used for testing.
tests/hamiltonian_cycle.lp.lp

> ./aspreify -r tests/hamiltonian_cycle.lp
The result is and RDF/N3-like format. 
tests/hamiltonian_cycle.lp.ssls
 
2. Limitations 

2.1 Error handling 

Error handling is rudimentary, syntax errors are reported, but often
indicated to be after the actual error. Errors are not signaled with the
return values, but the result file contains the syntax error.

2.2 Non-supported syntax 

The ; syntax for multiple facts is not supported (e.g. person(a; b; c).)
const and other similar syntax not supported. 

In the lparse release there are many example programs in the examples/ 
directory. Here we list those that are known not to work with
aspreify and the cause for it. 

examples/graph/
All OK

examples/logic/
All OK

examples/planning/
plan[12].lp			misparses 'compute models' statement
				as 'compute mod els' expression 
				What does it actually mean?

examples/puzzles/
Change person( ork; bog ) to person(ork). person(bog). to make
this work. 

puzzle1.lp			person(a; b; c).
puzzle2.lp			person( ork; bog ).
puzzle3.lp			person(a; b).

3. Other documentation 		

TODO
- List the produced factnames and the documentation for them
- add directives of the lparse language
- add support for the gringo input language
- have a look at quickcheck  

4. Self tests 

Compile the parser test suite and run it:
> ghc -o runparsertests testaspparse.hs aspparse.hs 
> ./runparsertests 

#EOF


